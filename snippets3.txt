//////////////
//Program.cs//
//////////////

builder.Services.AddControllersWithViews()
    .AddJsonOptions(options =>
    {
        options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
    });
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


app.UseSwagger();
app.UseSwaggerUI();


////////////////////////////
//Api/PiesApiController.cs//
////////////////////////////


using Microsoft.AspNetCore.Mvc;
using BethanysPieShop.Models;
using BethanysPieShop.ViewModels;

namespace BethanysPieShop.Controllers.Api
{
    [Route("api/[controller]")]
    [ApiController]
    public class PiesApiController : ControllerBase
    {
        private readonly IPieRepository _pieRepository;

        public PiesApiController(IPieRepository repository)
        {
            _pieRepository = repository;
        }

        /// <summary>
        /// Gets a list of all the Pies 
        /// </summary>
        /// <returns>A list of Pies</returns>
        [HttpGet]
        public ActionResult<IEnumerable<Pie>> GetAllPies()
        {
            return Ok(_pieRepository.AllPies);
        }

        /// <summary>
        /// Gets a specific pie
        /// </summary>
        /// <param name="id">Id of the Pie to get</param>
        /// <returns>A Pie</returns>
        [HttpGet("{id}")]
        public ActionResult<Pie> GetPie(int id)
        {
            var pie = _pieRepository.GetPieById(id);

            if (pie == null)
            {
                return NotFound();
            }

            return Ok(pie);
        }

        /// <summary>
        /// Post a new pie
        /// </summary>
        /// <param name="pie"></param>
        /// <returns>A new Pie</returns>
        /// <response code="201">Returns the newly created item</response>
        [HttpPost]
        public async Task<ActionResult<Pie>> PostPie(NewPieViewModel pieVM)
        {
            Pie newPie = CreatePieFromVM(pieVM);

            // newPie will get a new Id from the database! 
            _pieRepository.AddPie(newPie);

            return CreatedAtAction("GetPie", new { id = newPie.PieId }, newPie);
        }

        /// <summary>
        /// Deletes a Pie by id
        /// </summary>
        /// <param name="id">Id of the Pie to delete</param>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeletePie(int id)
        {
            Pie? pieToDelete = _pieRepository.GetPieById(id);
            if (pieToDelete is null)
            {
                return NotFound();
            }
            _pieRepository.DeletePie(pieToDelete);
            return NoContent();
        }

        
        // Note:
        // Kinda dumb helper function
        // we should use a mapper for this.
        // Check out AutoMapper or Mapperly! 
        private Pie CreatePieFromVM(NewPieViewModel pieVM)
        {
            Pie pie = new Pie();
            pie.Name = pieVM.Name;
            pie.ShortDescription = pieVM.ShortDescription;
            pie.LongDescription = pieVM.LongDescription;
            pie.AllergyInformation = pieVM.AllergyInformation;
            pie.Price = pieVM.Price;
            pie.ImageUrl = pieVM.ImageUrl;
            pie.ImageThumbnailUrl = pieVM.ImageThumbnailUrl;    
            pie.IsPieOfTheWeek = pieVM.IsPieOfTheWeek;
            pie.InStock = pieVM.InStock;
            pie.CategoryId = pieVM.CategoryId;
            return pie;
        }
    }
}
